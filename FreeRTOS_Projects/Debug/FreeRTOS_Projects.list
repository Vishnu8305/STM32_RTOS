
FreeRTOS_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800226c  0800226c  0000326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022b4  080022b4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080022b4  080022b4  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022b4  080022b4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022b4  080022b4  000032b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022b8  080022b8  000032b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022bc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080022c8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080022c8  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c966  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e87  00000000  00000000  000109a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00012830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a84  00000000  00000000  000135d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025840  00000000  00000000  00014054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7b2  00000000  00000000  00039894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f38c6  00000000  00000000  00048046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b90c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003828  00000000  00000000  0013b950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0013f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002254 	.word	0x08002254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08002254 	.word	0x08002254

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 f9e8 	bl	80005a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f804 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f854 	bl	8000288 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	bf00      	nop
 80001e2:	e7fd      	b.n	80001e0 <main+0x10>

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b096      	sub	sp, #88	@ 0x58
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0314 	add.w	r3, r7, #20
 80001ee:	2244      	movs	r2, #68	@ 0x44
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 f802 	bl	80021fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	463b      	mov	r3, r7
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000206:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800020a:	f000 fcbf 	bl	8000b8c <HAL_PWREx_ControlVoltageScaling>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000214:	f000 f8c2 	bl	800039c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000218:	2302      	movs	r3, #2
 800021a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000220:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000222:	2310      	movs	r3, #16
 8000224:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000226:	2302      	movs	r3, #2
 8000228:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800022a:	2302      	movs	r3, #2
 800022c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800022e:	2301      	movs	r3, #1
 8000230:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000232:	230a      	movs	r3, #10
 8000234:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000236:	2307      	movs	r3, #7
 8000238:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800023a:	2302      	movs	r3, #2
 800023c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800023e:	2302      	movs	r3, #2
 8000240:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000242:	f107 0314 	add.w	r3, r7, #20
 8000246:	4618      	mov	r0, r3
 8000248:	f000 fcf6 	bl	8000c38 <HAL_RCC_OscConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000252:	f000 f8a3 	bl	800039c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000256:	230f      	movs	r3, #15
 8000258:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800025a:	2303      	movs	r3, #3
 800025c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800025e:	2300      	movs	r3, #0
 8000260:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800026a:	463b      	mov	r3, r7
 800026c:	2104      	movs	r1, #4
 800026e:	4618      	mov	r0, r3
 8000270:	f001 f8be 	bl	80013f0 <HAL_RCC_ClockConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800027a:	f000 f88f 	bl	800039c <Error_Handler>
  }
}
 800027e:	bf00      	nop
 8000280:	3758      	adds	r7, #88	@ 0x58
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b08a      	sub	sp, #40	@ 0x28
 800028c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028e:	f107 0314 	add.w	r3, r7, #20
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029e:	4b34      	ldr	r3, [pc, #208]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002a2:	4a33      	ldr	r2, [pc, #204]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002a4:	f043 0304 	orr.w	r3, r3, #4
 80002a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002aa:	4b31      	ldr	r3, [pc, #196]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ae:	f003 0304 	and.w	r3, r3, #4
 80002b2:	613b      	str	r3, [r7, #16]
 80002b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002ca:	60fb      	str	r3, [r7, #12]
 80002cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ce:	4b28      	ldr	r3, [pc, #160]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d2:	4a27      	ldr	r2, [pc, #156]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002da:	4b25      	ldr	r3, [pc, #148]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
 80002e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e6:	4b22      	ldr	r3, [pc, #136]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ea:	4a21      	ldr	r2, [pc, #132]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002ec:	f043 0302 	orr.w	r3, r3, #2
 80002f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000370 <MX_GPIO_Init+0xe8>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002f6:	f003 0302 	and.w	r3, r3, #2
 80002fa:	607b      	str	r3, [r7, #4]
 80002fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2120      	movs	r1, #32
 8000302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000306:	f000 fc1b 	bl	8000b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800030a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800030e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000310:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800031a:	f107 0314 	add.w	r3, r7, #20
 800031e:	4619      	mov	r1, r3
 8000320:	4814      	ldr	r0, [pc, #80]	@ (8000374 <MX_GPIO_Init+0xec>)
 8000322:	f000 fa63 	bl	80007ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000326:	230c      	movs	r3, #12
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800032a:	2302      	movs	r3, #2
 800032c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000332:	2303      	movs	r3, #3
 8000334:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000336:	2307      	movs	r3, #7
 8000338:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033a:	f107 0314 	add.w	r3, r7, #20
 800033e:	4619      	mov	r1, r3
 8000340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000344:	f000 fa52 	bl	80007ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000348:	2320      	movs	r3, #32
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034c:	2301      	movs	r3, #1
 800034e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000350:	2300      	movs	r3, #0
 8000352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000354:	2300      	movs	r3, #0
 8000356:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000358:	f107 0314 	add.w	r3, r7, #20
 800035c:	4619      	mov	r1, r3
 800035e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000362:	f000 fa43 	bl	80007ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000366:	bf00      	nop
 8000368:	3728      	adds	r7, #40	@ 0x28
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	48000800 	.word	0x48000800

08000378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a04      	ldr	r2, [pc, #16]	@ (8000398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d101      	bne.n	800038e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800038a:	f000 f92d 	bl	80005e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40001000 	.word	0x40001000

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	bf00      	nop
 80003a6:	e7fd      	b.n	80003a4 <Error_Handler+0x8>

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <HAL_MspInit+0x44>)
 80003b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003b2:	4a0e      	ldr	r2, [pc, #56]	@ (80003ec <HAL_MspInit+0x44>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80003ba:	4b0c      	ldr	r3, [pc, #48]	@ (80003ec <HAL_MspInit+0x44>)
 80003bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b09      	ldr	r3, [pc, #36]	@ (80003ec <HAL_MspInit+0x44>)
 80003c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003ca:	4a08      	ldr	r2, [pc, #32]	@ (80003ec <HAL_MspInit+0x44>)
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80003d2:	4b06      	ldr	r3, [pc, #24]	@ (80003ec <HAL_MspInit+0x44>)
 80003d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003da:	603b      	str	r3, [r7, #0]
 80003dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000

080003f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08e      	sub	sp, #56	@ 0x38
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80003f8:	2300      	movs	r3, #0
 80003fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80003fe:	4b34      	ldr	r3, [pc, #208]	@ (80004d0 <HAL_InitTick+0xe0>)
 8000400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000402:	4a33      	ldr	r2, [pc, #204]	@ (80004d0 <HAL_InitTick+0xe0>)
 8000404:	f043 0310 	orr.w	r3, r3, #16
 8000408:	6593      	str	r3, [r2, #88]	@ 0x58
 800040a:	4b31      	ldr	r3, [pc, #196]	@ (80004d0 <HAL_InitTick+0xe0>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800040e:	f003 0310 	and.w	r3, r3, #16
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000416:	f107 0210 	add.w	r2, r7, #16
 800041a:	f107 0314 	add.w	r3, r7, #20
 800041e:	4611      	mov	r1, r2
 8000420:	4618      	mov	r0, r3
 8000422:	f001 f993 	bl	800174c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000426:	6a3b      	ldr	r3, [r7, #32]
 8000428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800042a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800042c:	2b00      	cmp	r3, #0
 800042e:	d103      	bne.n	8000438 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000430:	f001 f976 	bl	8001720 <HAL_RCC_GetPCLK1Freq>
 8000434:	6378      	str	r0, [r7, #52]	@ 0x34
 8000436:	e004      	b.n	8000442 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000438:	f001 f972 	bl	8001720 <HAL_RCC_GetPCLK1Freq>
 800043c:	4603      	mov	r3, r0
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000444:	4a23      	ldr	r2, [pc, #140]	@ (80004d4 <HAL_InitTick+0xe4>)
 8000446:	fba2 2303 	umull	r2, r3, r2, r3
 800044a:	0c9b      	lsrs	r3, r3, #18
 800044c:	3b01      	subs	r3, #1
 800044e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <HAL_InitTick+0xe8>)
 8000452:	4a22      	ldr	r2, [pc, #136]	@ (80004dc <HAL_InitTick+0xec>)
 8000454:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000456:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <HAL_InitTick+0xe8>)
 8000458:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800045c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800045e:	4a1e      	ldr	r2, [pc, #120]	@ (80004d8 <HAL_InitTick+0xe8>)
 8000460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000462:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000464:	4b1c      	ldr	r3, [pc, #112]	@ (80004d8 <HAL_InitTick+0xe8>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800046a:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <HAL_InitTick+0xe8>)
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000470:	4b19      	ldr	r3, [pc, #100]	@ (80004d8 <HAL_InitTick+0xe8>)
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000476:	4818      	ldr	r0, [pc, #96]	@ (80004d8 <HAL_InitTick+0xe8>)
 8000478:	f001 f9fa 	bl	8001870 <HAL_TIM_Base_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000482:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000486:	2b00      	cmp	r3, #0
 8000488:	d11b      	bne.n	80004c2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800048a:	4813      	ldr	r0, [pc, #76]	@ (80004d8 <HAL_InitTick+0xe8>)
 800048c:	f001 fa52 	bl	8001934 <HAL_TIM_Base_Start_IT>
 8000490:	4603      	mov	r3, r0
 8000492:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000496:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800049a:	2b00      	cmp	r3, #0
 800049c:	d111      	bne.n	80004c2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800049e:	2036      	movs	r0, #54	@ 0x36
 80004a0:	f000 f996 	bl	80007d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2b0f      	cmp	r3, #15
 80004a8:	d808      	bhi.n	80004bc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80004aa:	2200      	movs	r2, #0
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	2036      	movs	r0, #54	@ 0x36
 80004b0:	f000 f972 	bl	8000798 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004b4:	4a0a      	ldr	r2, [pc, #40]	@ (80004e0 <HAL_InitTick+0xf0>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	6013      	str	r3, [r2, #0]
 80004ba:	e002      	b.n	80004c2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80004bc:	2301      	movs	r3, #1
 80004be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80004c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	3738      	adds	r7, #56	@ 0x38
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	431bde83 	.word	0x431bde83
 80004d8:	20000028 	.word	0x20000028
 80004dc:	40001000 	.word	0x40001000
 80004e0:	20000004 	.word	0x20000004

080004e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <NMI_Handler+0x4>

080004ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <HardFault_Handler+0x4>

080004f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <MemManage_Handler+0x4>

080004fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <BusFault_Handler+0x4>

08000504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <UsageFault_Handler+0x4>

0800050c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000520:	4802      	ldr	r0, [pc, #8]	@ (800052c <TIM6_DAC_IRQHandler+0x10>)
 8000522:	f001 fa77 	bl	8001a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000028 	.word	0x20000028

08000530 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000534:	4b06      	ldr	r3, [pc, #24]	@ (8000550 <SystemInit+0x20>)
 8000536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800053a:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <SystemInit+0x20>)
 800053c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000540:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000554:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800058c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000558:	f7ff ffea 	bl	8000530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800055c:	480c      	ldr	r0, [pc, #48]	@ (8000590 <LoopForever+0x6>)
  ldr r1, =_edata
 800055e:	490d      	ldr	r1, [pc, #52]	@ (8000594 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <LoopForever+0xe>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000564:	e002      	b.n	800056c <LoopCopyDataInit>

08000566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800056a:	3304      	adds	r3, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800056c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000570:	d3f9      	bcc.n	8000566 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000572:	4a0a      	ldr	r2, [pc, #40]	@ (800059c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000574:	4c0a      	ldr	r4, [pc, #40]	@ (80005a0 <LoopForever+0x16>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000578:	e001      	b.n	800057e <LoopFillZerobss>

0800057a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800057a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800057c:	3204      	adds	r2, #4

0800057e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000580:	d3fb      	bcc.n	800057a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000582:	f001 fe43 	bl	800220c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000586:	f7ff fe23 	bl	80001d0 <main>

0800058a <LoopForever>:

LoopForever:
    b LoopForever
 800058a:	e7fe      	b.n	800058a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800058c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000594:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000598:	080022bc 	.word	0x080022bc
  ldr r2, =_sbss
 800059c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005a0:	20000104 	.word	0x20000104

080005a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a4:	e7fe      	b.n	80005a4 <ADC1_2_IRQHandler>
	...

080005a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b2:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <HAL_Init+0x3c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a0b      	ldr	r2, [pc, #44]	@ (80005e4 <HAL_Init+0x3c>)
 80005b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005be:	2003      	movs	r0, #3
 80005c0:	f000 f8df 	bl	8000782 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c4:	200f      	movs	r0, #15
 80005c6:	f7ff ff13 	bl	80003f0 <HAL_InitTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	e001      	b.n	80005da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d6:	f7ff fee7 	bl	80003a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005da:	79fb      	ldrb	r3, [r7, #7]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40022000 	.word	0x40022000

080005e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <HAL_IncTick+0x20>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b06      	ldr	r3, [pc, #24]	@ (800060c <HAL_IncTick+0x24>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4413      	add	r3, r2
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <HAL_IncTick+0x24>)
 80005fa:	6013      	str	r3, [r2, #0]
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000008 	.word	0x20000008
 800060c:	20000074 	.word	0x20000074

08000610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return uwTick;
 8000614:	4b03      	ldr	r3, [pc, #12]	@ (8000624 <HAL_GetTick+0x14>)
 8000616:	681b      	ldr	r3, [r3, #0]
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000074 	.word	0x20000074

08000628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000650:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	@ (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b04      	ldr	r3, [pc, #16]	@ (8000688 <__NVIC_GetPriorityGrouping+0x18>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	db0b      	blt.n	80006b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 021f 	and.w	r2, r3, #31
 80006a4:	4907      	ldr	r1, [pc, #28]	@ (80006c4 <__NVIC_EnableIRQ+0x38>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	095b      	lsrs	r3, r3, #5
 80006ac:	2001      	movs	r0, #1
 80006ae:	fa00 f202 	lsl.w	r2, r0, r2
 80006b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000e100 	.word	0xe000e100

080006c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	db0a      	blt.n	80006f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	490c      	ldr	r1, [pc, #48]	@ (8000714 <__NVIC_SetPriority+0x4c>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	0112      	lsls	r2, r2, #4
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	440b      	add	r3, r1
 80006ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f0:	e00a      	b.n	8000708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4908      	ldr	r1, [pc, #32]	@ (8000718 <__NVIC_SetPriority+0x50>)
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	f003 030f 	and.w	r3, r3, #15
 80006fe:	3b04      	subs	r3, #4
 8000700:	0112      	lsls	r2, r2, #4
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	440b      	add	r3, r1
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800071c:	b480      	push	{r7}
 800071e:	b089      	sub	sp, #36	@ 0x24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	f1c3 0307 	rsb	r3, r3, #7
 8000736:	2b04      	cmp	r3, #4
 8000738:	bf28      	it	cs
 800073a:	2304      	movcs	r3, #4
 800073c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	3304      	adds	r3, #4
 8000742:	2b06      	cmp	r3, #6
 8000744:	d902      	bls.n	800074c <NVIC_EncodePriority+0x30>
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3b03      	subs	r3, #3
 800074a:	e000      	b.n	800074e <NVIC_EncodePriority+0x32>
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000750:	f04f 32ff 	mov.w	r2, #4294967295
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	fa02 f303 	lsl.w	r3, r2, r3
 800075a:	43da      	mvns	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	401a      	ands	r2, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000764:	f04f 31ff 	mov.w	r1, #4294967295
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43d9      	mvns	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	4313      	orrs	r3, r2
         );
}
 8000776:	4618      	mov	r0, r3
 8000778:	3724      	adds	r7, #36	@ 0x24
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ff4c 	bl	8000628 <__NVIC_SetPriorityGrouping>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007aa:	f7ff ff61 	bl	8000670 <__NVIC_GetPriorityGrouping>
 80007ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	68b9      	ldr	r1, [r7, #8]
 80007b4:	6978      	ldr	r0, [r7, #20]
 80007b6:	f7ff ffb1 	bl	800071c <NVIC_EncodePriority>
 80007ba:	4602      	mov	r2, r0
 80007bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c0:	4611      	mov	r1, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff80 	bl	80006c8 <__NVIC_SetPriority>
}
 80007c8:	bf00      	nop
 80007ca:	3718      	adds	r7, #24
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff54 	bl	800068c <__NVIC_EnableIRQ>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f6:	2300      	movs	r3, #0
 80007f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007fa:	e17f      	b.n	8000afc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	2101      	movs	r1, #1
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	fa01 f303 	lsl.w	r3, r1, r3
 8000808:	4013      	ands	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	2b00      	cmp	r3, #0
 8000810:	f000 8171 	beq.w	8000af6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	f003 0303 	and.w	r3, r3, #3
 800081c:	2b01      	cmp	r3, #1
 800081e:	d005      	beq.n	800082c <HAL_GPIO_Init+0x40>
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f003 0303 	and.w	r3, r3, #3
 8000828:	2b02      	cmp	r3, #2
 800082a:	d130      	bne.n	800088e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	2203      	movs	r2, #3
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	4013      	ands	r3, r2
 8000842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	68da      	ldr	r2, [r3, #12]
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	4313      	orrs	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000862:	2201      	movs	r2, #1
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43db      	mvns	r3, r3
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	4013      	ands	r3, r2
 8000870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	091b      	lsrs	r3, r3, #4
 8000878:	f003 0201 	and.w	r2, r3, #1
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	693a      	ldr	r2, [r7, #16]
 8000884:	4313      	orrs	r3, r2
 8000886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	693a      	ldr	r2, [r7, #16]
 800088c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	f003 0303 	and.w	r3, r3, #3
 8000896:	2b03      	cmp	r3, #3
 8000898:	d118      	bne.n	80008cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800089e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80008a0:	2201      	movs	r2, #1
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	43db      	mvns	r3, r3
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	4013      	ands	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	08db      	lsrs	r3, r3, #3
 80008b6:	f003 0201 	and.w	r2, r3, #1
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d017      	beq.n	8000908 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	2203      	movs	r2, #3
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	43db      	mvns	r3, r3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4013      	ands	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	689a      	ldr	r2, [r3, #8]
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	4313      	orrs	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f003 0303 	and.w	r3, r3, #3
 8000910:	2b02      	cmp	r3, #2
 8000912:	d123      	bne.n	800095c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	08da      	lsrs	r2, r3, #3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3208      	adds	r2, #8
 800091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000920:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f003 0307 	and.w	r3, r3, #7
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	220f      	movs	r2, #15
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	691a      	ldr	r2, [r3, #16]
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	693a      	ldr	r2, [r7, #16]
 800094a:	4313      	orrs	r3, r2
 800094c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	08da      	lsrs	r2, r3, #3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3208      	adds	r2, #8
 8000956:	6939      	ldr	r1, [r7, #16]
 8000958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	2203      	movs	r2, #3
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	43db      	mvns	r3, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 0203 	and.w	r2, r3, #3
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	4313      	orrs	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 80ac 	beq.w	8000af6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b5f      	ldr	r3, [pc, #380]	@ (8000b1c <HAL_GPIO_Init+0x330>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a2:	4a5e      	ldr	r2, [pc, #376]	@ (8000b1c <HAL_GPIO_Init+0x330>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80009aa:	4b5c      	ldr	r3, [pc, #368]	@ (8000b1c <HAL_GPIO_Init+0x330>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009b6:	4a5a      	ldr	r2, [pc, #360]	@ (8000b20 <HAL_GPIO_Init+0x334>)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009e0:	d025      	beq.n	8000a2e <HAL_GPIO_Init+0x242>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a4f      	ldr	r2, [pc, #316]	@ (8000b24 <HAL_GPIO_Init+0x338>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d01f      	beq.n	8000a2a <HAL_GPIO_Init+0x23e>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4e      	ldr	r2, [pc, #312]	@ (8000b28 <HAL_GPIO_Init+0x33c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d019      	beq.n	8000a26 <HAL_GPIO_Init+0x23a>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4d      	ldr	r2, [pc, #308]	@ (8000b2c <HAL_GPIO_Init+0x340>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d013      	beq.n	8000a22 <HAL_GPIO_Init+0x236>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a4c      	ldr	r2, [pc, #304]	@ (8000b30 <HAL_GPIO_Init+0x344>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d00d      	beq.n	8000a1e <HAL_GPIO_Init+0x232>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4b      	ldr	r2, [pc, #300]	@ (8000b34 <HAL_GPIO_Init+0x348>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d007      	beq.n	8000a1a <HAL_GPIO_Init+0x22e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4a      	ldr	r2, [pc, #296]	@ (8000b38 <HAL_GPIO_Init+0x34c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_GPIO_Init+0x22a>
 8000a12:	2306      	movs	r3, #6
 8000a14:	e00c      	b.n	8000a30 <HAL_GPIO_Init+0x244>
 8000a16:	2307      	movs	r3, #7
 8000a18:	e00a      	b.n	8000a30 <HAL_GPIO_Init+0x244>
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e008      	b.n	8000a30 <HAL_GPIO_Init+0x244>
 8000a1e:	2304      	movs	r3, #4
 8000a20:	e006      	b.n	8000a30 <HAL_GPIO_Init+0x244>
 8000a22:	2303      	movs	r3, #3
 8000a24:	e004      	b.n	8000a30 <HAL_GPIO_Init+0x244>
 8000a26:	2302      	movs	r3, #2
 8000a28:	e002      	b.n	8000a30 <HAL_GPIO_Init+0x244>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e000      	b.n	8000a30 <HAL_GPIO_Init+0x244>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	f002 0203 	and.w	r2, r2, #3
 8000a36:	0092      	lsls	r2, r2, #2
 8000a38:	4093      	lsls	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a40:	4937      	ldr	r1, [pc, #220]	@ (8000b20 <HAL_GPIO_Init+0x334>)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	089b      	lsrs	r3, r3, #2
 8000a46:	3302      	adds	r3, #2
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b3c <HAL_GPIO_Init+0x350>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a72:	4a32      	ldr	r2, [pc, #200]	@ (8000b3c <HAL_GPIO_Init+0x350>)
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a78:	4b30      	ldr	r3, [pc, #192]	@ (8000b3c <HAL_GPIO_Init+0x350>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a9c:	4a27      	ldr	r2, [pc, #156]	@ (8000b3c <HAL_GPIO_Init+0x350>)
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <HAL_GPIO_Init+0x350>)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d003      	beq.n	8000ac6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ac6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b3c <HAL_GPIO_Init+0x350>)
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b3c <HAL_GPIO_Init+0x350>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000af0:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <HAL_GPIO_Init+0x350>)
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	fa22 f303 	lsr.w	r3, r2, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f47f ae78 	bne.w	80007fc <HAL_GPIO_Init+0x10>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	371c      	adds	r7, #28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40010000 	.word	0x40010000
 8000b24:	48000400 	.word	0x48000400
 8000b28:	48000800 	.word	0x48000800
 8000b2c:	48000c00 	.word	0x48000c00
 8000b30:	48001000 	.word	0x48001000
 8000b34:	48001400 	.word	0x48001400
 8000b38:	48001800 	.word	0x48001800
 8000b3c:	40010400 	.word	0x40010400

08000b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b50:	787b      	ldrb	r3, [r7, #1]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b5c:	e002      	b.n	8000b64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b5e:	887a      	ldrh	r2, [r7, #2]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40007000 	.word	0x40007000

08000b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b9a:	d130      	bne.n	8000bfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b9c:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ba8:	d038      	beq.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000baa:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bba:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2232      	movs	r2, #50	@ 0x32
 8000bc0:	fb02 f303 	mul.w	r3, r2, r3
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bca:	0c9b      	lsrs	r3, r3, #18
 8000bcc:	3301      	adds	r3, #1
 8000bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd0:	e002      	b.n	8000bd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bda:	695b      	ldr	r3, [r3, #20]
 8000bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000be4:	d102      	bne.n	8000bec <HAL_PWREx_ControlVoltageScaling+0x60>
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1f2      	bne.n	8000bd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bf8:	d110      	bne.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e00f      	b.n	8000c1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c0a:	d007      	beq.n	8000c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c14:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40007000 	.word	0x40007000
 8000c30:	20000000 	.word	0x20000000
 8000c34:	431bde83 	.word	0x431bde83

08000c38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e3ca      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c4a:	4b97      	ldr	r3, [pc, #604]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
 8000c52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c54:	4b94      	ldr	r3, [pc, #592]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0310 	and.w	r3, r3, #16
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f000 80e4 	beq.w	8000e34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <HAL_RCC_OscConfig+0x4a>
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	2b0c      	cmp	r3, #12
 8000c76:	f040 808b 	bne.w	8000d90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	f040 8087 	bne.w	8000d90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c82:	4b89      	ldr	r3, [pc, #548]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d005      	beq.n	8000c9a <HAL_RCC_OscConfig+0x62>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e3a2      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a1a      	ldr	r2, [r3, #32]
 8000c9e:	4b82      	ldr	r3, [pc, #520]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d004      	beq.n	8000cb4 <HAL_RCC_OscConfig+0x7c>
 8000caa:	4b7f      	ldr	r3, [pc, #508]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cb2:	e005      	b.n	8000cc0 <HAL_RCC_OscConfig+0x88>
 8000cb4:	4b7c      	ldr	r3, [pc, #496]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d223      	bcs.n	8000d0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fd71 	bl	80017b0 <RCC_SetFlashLatencyFromMSIRange>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e383      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cd8:	4b73      	ldr	r3, [pc, #460]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a72      	ldr	r2, [pc, #456]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cde:	f043 0308 	orr.w	r3, r3, #8
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4b70      	ldr	r3, [pc, #448]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	496d      	ldr	r1, [pc, #436]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cf6:	4b6c      	ldr	r3, [pc, #432]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	4968      	ldr	r1, [pc, #416]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d06:	4313      	orrs	r3, r2
 8000d08:	604b      	str	r3, [r1, #4]
 8000d0a:	e025      	b.n	8000d58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d0c:	4b66      	ldr	r3, [pc, #408]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a65      	ldr	r2, [pc, #404]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d12:	f043 0308 	orr.w	r3, r3, #8
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b63      	ldr	r3, [pc, #396]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	4960      	ldr	r1, [pc, #384]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	495b      	ldr	r1, [pc, #364]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d109      	bne.n	8000d58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fd31 	bl	80017b0 <RCC_SetFlashLatencyFromMSIRange>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e343      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d58:	f000 fc4a 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	4b52      	ldr	r3, [pc, #328]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	f003 030f 	and.w	r3, r3, #15
 8000d68:	4950      	ldr	r1, [pc, #320]	@ (8000eac <HAL_RCC_OscConfig+0x274>)
 8000d6a:	5ccb      	ldrb	r3, [r1, r3]
 8000d6c:	f003 031f 	and.w	r3, r3, #31
 8000d70:	fa22 f303 	lsr.w	r3, r2, r3
 8000d74:	4a4e      	ldr	r2, [pc, #312]	@ (8000eb0 <HAL_RCC_OscConfig+0x278>)
 8000d76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d78:	4b4e      	ldr	r3, [pc, #312]	@ (8000eb4 <HAL_RCC_OscConfig+0x27c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fb37 	bl	80003f0 <HAL_InitTick>
 8000d82:	4603      	mov	r3, r0
 8000d84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d052      	beq.n	8000e32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	e327      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d032      	beq.n	8000dfe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d98:	4b43      	ldr	r3, [pc, #268]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a42      	ldr	r2, [pc, #264]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000da4:	f7ff fc34 	bl	8000610 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc30 	bl	8000610 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e310      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000dca:	4b37      	ldr	r3, [pc, #220]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a36      	ldr	r2, [pc, #216]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	6013      	str	r3, [r2, #0]
 8000dd6:	4b34      	ldr	r3, [pc, #208]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	4931      	ldr	r1, [pc, #196]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000de4:	4313      	orrs	r3, r2
 8000de6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000de8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	021b      	lsls	r3, r3, #8
 8000df6:	492c      	ldr	r1, [pc, #176]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	604b      	str	r3, [r1, #4]
 8000dfc:	e01a      	b.n	8000e34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a29      	ldr	r2, [pc, #164]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e0a:	f7ff fc01 	bl	8000610 <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e12:	f7ff fbfd 	bl	8000610 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e2dd      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e24:	4b20      	ldr	r3, [pc, #128]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1f0      	bne.n	8000e12 <HAL_RCC_OscConfig+0x1da>
 8000e30:	e000      	b.n	8000e34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d074      	beq.n	8000f2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	d005      	beq.n	8000e52 <HAL_RCC_OscConfig+0x21a>
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2b0c      	cmp	r3, #12
 8000e4a:	d10e      	bne.n	8000e6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d10b      	bne.n	8000e6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d064      	beq.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d160      	bne.n	8000f28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e2ba      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e72:	d106      	bne.n	8000e82 <HAL_RCC_OscConfig+0x24a>
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e026      	b.n	8000ed0 <HAL_RCC_OscConfig+0x298>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e8a:	d115      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x280>
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e92:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a02      	ldr	r2, [pc, #8]	@ (8000ea8 <HAL_RCC_OscConfig+0x270>)
 8000e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e014      	b.n	8000ed0 <HAL_RCC_OscConfig+0x298>
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	0800226c 	.word	0x0800226c
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000004 	.word	0x20000004
 8000eb8:	4ba0      	ldr	r3, [pc, #640]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a9f      	ldr	r2, [pc, #636]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b9d      	ldr	r3, [pc, #628]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a9c      	ldr	r2, [pc, #624]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d013      	beq.n	8000f00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fb9a 	bl	8000610 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee0:	f7ff fb96 	bl	8000610 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b64      	cmp	r3, #100	@ 0x64
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e276      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ef2:	4b92      	ldr	r3, [pc, #584]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f0      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x2a8>
 8000efe:	e014      	b.n	8000f2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f00:	f7ff fb86 	bl	8000610 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fb82 	bl	8000610 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b64      	cmp	r3, #100	@ 0x64
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e262      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f1a:	4b88      	ldr	r3, [pc, #544]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f0      	bne.n	8000f08 <HAL_RCC_OscConfig+0x2d0>
 8000f26:	e000      	b.n	8000f2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d060      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d005      	beq.n	8000f48 <HAL_RCC_OscConfig+0x310>
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b0c      	cmp	r3, #12
 8000f40:	d119      	bne.n	8000f76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d116      	bne.n	8000f76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f48:	4b7c      	ldr	r3, [pc, #496]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <HAL_RCC_OscConfig+0x328>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d101      	bne.n	8000f60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e23f      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f60:	4b76      	ldr	r3, [pc, #472]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	061b      	lsls	r3, r3, #24
 8000f6e:	4973      	ldr	r1, [pc, #460]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f74:	e040      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d023      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a6e      	ldr	r2, [pc, #440]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8a:	f7ff fb41 	bl	8000610 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f92:	f7ff fb3d 	bl	8000610 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e21d      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa4:	4b65      	ldr	r3, [pc, #404]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb0:	4b62      	ldr	r3, [pc, #392]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	061b      	lsls	r3, r3, #24
 8000fbe:	495f      	ldr	r1, [pc, #380]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
 8000fc4:	e018      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a5c      	ldr	r2, [pc, #368]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fb1d 	bl	8000610 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fda:	f7ff fb19 	bl	8000610 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e1f9      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fec:	4b53      	ldr	r3, [pc, #332]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f0      	bne.n	8000fda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b00      	cmp	r3, #0
 8001002:	d03c      	beq.n	800107e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01c      	beq.n	8001046 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800100c:	4b4b      	ldr	r3, [pc, #300]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 800100e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001012:	4a4a      	ldr	r2, [pc, #296]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800101c:	f7ff faf8 	bl	8000610 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001024:	f7ff faf4 	bl	8000610 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e1d4      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001036:	4b41      	ldr	r3, [pc, #260]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0ef      	beq.n	8001024 <HAL_RCC_OscConfig+0x3ec>
 8001044:	e01b      	b.n	800107e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001046:	4b3d      	ldr	r3, [pc, #244]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800104c:	4a3b      	ldr	r2, [pc, #236]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001056:	f7ff fadb 	bl	8000610 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800105e:	f7ff fad7 	bl	8000610 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e1b7      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001070:	4b32      	ldr	r3, [pc, #200]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1ef      	bne.n	800105e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 80a6 	beq.w	80011d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800108c:	2300      	movs	r3, #0
 800108e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10d      	bne.n	80010b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 800109e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a0:	4a26      	ldr	r2, [pc, #152]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010b4:	2301      	movs	r3, #1
 80010b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <HAL_RCC_OscConfig+0x508>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d118      	bne.n	80010f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <HAL_RCC_OscConfig+0x508>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001140 <HAL_RCC_OscConfig+0x508>)
 80010ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010d0:	f7ff fa9e 	bl	8000610 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010d8:	f7ff fa9a 	bl	8000610 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e17a      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_RCC_OscConfig+0x508>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d108      	bne.n	8001110 <HAL_RCC_OscConfig+0x4d8>
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800110e:	e029      	b.n	8001164 <HAL_RCC_OscConfig+0x52c>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d115      	bne.n	8001144 <HAL_RCC_OscConfig+0x50c>
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 800111a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800111e:	4a07      	ldr	r2, [pc, #28]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 800112a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800112e:	4a03      	ldr	r2, [pc, #12]	@ (800113c <HAL_RCC_OscConfig+0x504>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001138:	e014      	b.n	8001164 <HAL_RCC_OscConfig+0x52c>
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000
 8001140:	40007000 	.word	0x40007000
 8001144:	4b9c      	ldr	r3, [pc, #624]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800114a:	4a9b      	ldr	r2, [pc, #620]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001154:	4b98      	ldr	r3, [pc, #608]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800115a:	4a97      	ldr	r2, [pc, #604]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 800115c:	f023 0304 	bic.w	r3, r3, #4
 8001160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d016      	beq.n	800119a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116c:	f7ff fa50 	bl	8000610 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001172:	e00a      	b.n	800118a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001174:	f7ff fa4c 	bl	8000610 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001182:	4293      	cmp	r3, r2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e12a      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800118a:	4b8b      	ldr	r3, [pc, #556]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 800118c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0ed      	beq.n	8001174 <HAL_RCC_OscConfig+0x53c>
 8001198:	e015      	b.n	80011c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119a:	f7ff fa39 	bl	8000610 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011a2:	f7ff fa35 	bl	8000610 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e113      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011b8:	4b7f      	ldr	r3, [pc, #508]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 80011ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1ed      	bne.n	80011a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011c6:	7ffb      	ldrb	r3, [r7, #31]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d105      	bne.n	80011d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011cc:	4b7a      	ldr	r3, [pc, #488]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d0:	4a79      	ldr	r2, [pc, #484]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 80011d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 80fe 	beq.w	80013de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	f040 80d0 	bne.w	800138c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011ec:	4b72      	ldr	r3, [pc, #456]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	f003 0203 	and.w	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d130      	bne.n	8001262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	3b01      	subs	r3, #1
 800120c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800120e:	429a      	cmp	r2, r3
 8001210:	d127      	bne.n	8001262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800121c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800121e:	429a      	cmp	r2, r3
 8001220:	d11f      	bne.n	8001262 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800122c:	2a07      	cmp	r2, #7
 800122e:	bf14      	ite	ne
 8001230:	2201      	movne	r2, #1
 8001232:	2200      	moveq	r2, #0
 8001234:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001236:	4293      	cmp	r3, r2
 8001238:	d113      	bne.n	8001262 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	3b01      	subs	r3, #1
 8001248:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800124a:	429a      	cmp	r2, r3
 800124c:	d109      	bne.n	8001262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	085b      	lsrs	r3, r3, #1
 800125a:	3b01      	subs	r3, #1
 800125c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800125e:	429a      	cmp	r2, r3
 8001260:	d06e      	beq.n	8001340 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b0c      	cmp	r3, #12
 8001266:	d069      	beq.n	800133c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001268:	4b53      	ldr	r3, [pc, #332]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d105      	bne.n	8001280 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001274:	4b50      	ldr	r3, [pc, #320]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0ad      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001284:	4b4c      	ldr	r3, [pc, #304]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a4b      	ldr	r2, [pc, #300]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 800128a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800128e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001290:	f7ff f9be 	bl	8000610 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff f9ba 	bl	8000610 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e09a      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012aa:	4b43      	ldr	r3, [pc, #268]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f0      	bne.n	8001298 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b6:	4b40      	ldr	r3, [pc, #256]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	4b40      	ldr	r3, [pc, #256]	@ (80013bc <HAL_RCC_OscConfig+0x784>)
 80012bc:	4013      	ands	r3, r2
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80012c6:	3a01      	subs	r2, #1
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	4311      	orrs	r1, r2
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80012d0:	0212      	lsls	r2, r2, #8
 80012d2:	4311      	orrs	r1, r2
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80012d8:	0852      	lsrs	r2, r2, #1
 80012da:	3a01      	subs	r2, #1
 80012dc:	0552      	lsls	r2, r2, #21
 80012de:	4311      	orrs	r1, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80012e4:	0852      	lsrs	r2, r2, #1
 80012e6:	3a01      	subs	r2, #1
 80012e8:	0652      	lsls	r2, r2, #25
 80012ea:	4311      	orrs	r1, r2
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80012f0:	0912      	lsrs	r2, r2, #4
 80012f2:	0452      	lsls	r2, r2, #17
 80012f4:	430a      	orrs	r2, r1
 80012f6:	4930      	ldr	r1, [pc, #192]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012fc:	4b2e      	ldr	r3, [pc, #184]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a2d      	ldr	r2, [pc, #180]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001306:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001308:	4b2b      	ldr	r3, [pc, #172]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4a2a      	ldr	r2, [pc, #168]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 800130e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001312:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001314:	f7ff f97c 	bl	8000610 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff f978 	bl	8000610 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e058      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132e:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800133a:	e050      	b.n	80013de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e04f      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001340:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d148      	bne.n	80013de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800134c:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001356:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001358:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4a16      	ldr	r2, [pc, #88]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 800135e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001362:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001364:	f7ff f954 	bl	8000610 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff f950 	bl	8000610 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e030      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0x734>
 800138a:	e028      	b.n	80013de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2b0c      	cmp	r3, #12
 8001390:	d023      	beq.n	80013da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a08      	ldr	r2, [pc, #32]	@ (80013b8 <HAL_RCC_OscConfig+0x780>)
 8001398:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800139c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139e:	f7ff f937 	bl	8000610 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a4:	e00c      	b.n	80013c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a6:	f7ff f933 	bl	8000610 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d905      	bls.n	80013c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e013      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
 80013b8:	40021000 	.word	0x40021000
 80013bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <HAL_RCC_OscConfig+0x7b0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1ec      	bne.n	80013a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_RCC_OscConfig+0x7b0>)
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	4905      	ldr	r1, [pc, #20]	@ (80013e8 <HAL_RCC_OscConfig+0x7b0>)
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <HAL_RCC_OscConfig+0x7b4>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	60cb      	str	r3, [r1, #12]
 80013d8:	e001      	b.n	80013de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	feeefffc 	.word	0xfeeefffc

080013f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0e7      	b.n	80015d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001404:	4b75      	ldr	r3, [pc, #468]	@ (80015dc <HAL_RCC_ClockConfig+0x1ec>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d910      	bls.n	8001434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001412:	4b72      	ldr	r3, [pc, #456]	@ (80015dc <HAL_RCC_ClockConfig+0x1ec>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f023 0207 	bic.w	r2, r3, #7
 800141a:	4970      	ldr	r1, [pc, #448]	@ (80015dc <HAL_RCC_ClockConfig+0x1ec>)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001422:	4b6e      	ldr	r3, [pc, #440]	@ (80015dc <HAL_RCC_ClockConfig+0x1ec>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0cf      	b.n	80015d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d010      	beq.n	8001462 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	4b66      	ldr	r3, [pc, #408]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800144c:	429a      	cmp	r2, r3
 800144e:	d908      	bls.n	8001462 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001450:	4b63      	ldr	r3, [pc, #396]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4960      	ldr	r1, [pc, #384]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 800145e:	4313      	orrs	r3, r2
 8001460:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d04c      	beq.n	8001508 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001476:	4b5a      	ldr	r3, [pc, #360]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d121      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0a6      	b.n	80015d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b02      	cmp	r3, #2
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148e:	4b54      	ldr	r3, [pc, #336]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d115      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e09a      	b.n	80015d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d107      	bne.n	80014b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a6:	4b4e      	ldr	r3, [pc, #312]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e08e      	b.n	80015d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b6:	4b4a      	ldr	r3, [pc, #296]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e086      	b.n	80015d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014c6:	4b46      	ldr	r3, [pc, #280]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f023 0203 	bic.w	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4943      	ldr	r1, [pc, #268]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014d8:	f7ff f89a 	bl	8000610 <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e0:	f7ff f896 	bl	8000610 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e06e      	b.n	80015d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f6:	4b3a      	ldr	r3, [pc, #232]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 020c 	and.w	r2, r3, #12
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	429a      	cmp	r2, r3
 8001506:	d1eb      	bne.n	80014e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d010      	beq.n	8001536 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001520:	429a      	cmp	r2, r3
 8001522:	d208      	bcs.n	8001536 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001524:	4b2e      	ldr	r3, [pc, #184]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	492b      	ldr	r1, [pc, #172]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001536:	4b29      	ldr	r3, [pc, #164]	@ (80015dc <HAL_RCC_ClockConfig+0x1ec>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	429a      	cmp	r2, r3
 8001542:	d210      	bcs.n	8001566 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <HAL_RCC_ClockConfig+0x1ec>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f023 0207 	bic.w	r2, r3, #7
 800154c:	4923      	ldr	r1, [pc, #140]	@ (80015dc <HAL_RCC_ClockConfig+0x1ec>)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001554:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <HAL_RCC_ClockConfig+0x1ec>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	429a      	cmp	r2, r3
 8001560:	d001      	beq.n	8001566 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e036      	b.n	80015d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	d008      	beq.n	8001584 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	4918      	ldr	r1, [pc, #96]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001580:	4313      	orrs	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d009      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4910      	ldr	r1, [pc, #64]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015a4:	f000 f824 	bl	80015f0 <HAL_RCC_GetSysClockFreq>
 80015a8:	4602      	mov	r2, r0
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_RCC_ClockConfig+0x1f0>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	490b      	ldr	r1, [pc, #44]	@ (80015e4 <HAL_RCC_ClockConfig+0x1f4>)
 80015b6:	5ccb      	ldrb	r3, [r1, r3]
 80015b8:	f003 031f 	and.w	r3, r3, #31
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
 80015c0:	4a09      	ldr	r2, [pc, #36]	@ (80015e8 <HAL_RCC_ClockConfig+0x1f8>)
 80015c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <HAL_RCC_ClockConfig+0x1fc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ff11 	bl	80003f0 <HAL_InitTick>
 80015ce:	4603      	mov	r3, r0
 80015d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80015d2:	7afb      	ldrb	r3, [r7, #11]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40022000 	.word	0x40022000
 80015e0:	40021000 	.word	0x40021000
 80015e4:	0800226c 	.word	0x0800226c
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015fe:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001608:	4b3b      	ldr	r3, [pc, #236]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0x34>
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2b0c      	cmp	r3, #12
 800161c:	d121      	bne.n	8001662 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d11e      	bne.n	8001662 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001624:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d107      	bne.n	8001640 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001630:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001636:	0a1b      	lsrs	r3, r3, #8
 8001638:	f003 030f 	and.w	r3, r3, #15
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e005      	b.n	800164c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001640:	4b2d      	ldr	r3, [pc, #180]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800164c:	4a2b      	ldr	r2, [pc, #172]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10d      	bne.n	8001678 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001660:	e00a      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	2b04      	cmp	r3, #4
 8001666:	d102      	bne.n	800166e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001668:	4b25      	ldr	r3, [pc, #148]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x110>)
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	e004      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	2b08      	cmp	r3, #8
 8001672:	d101      	bne.n	8001678 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001674:	4b23      	ldr	r3, [pc, #140]	@ (8001704 <HAL_RCC_GetSysClockFreq+0x114>)
 8001676:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d134      	bne.n	80016e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800167e:	4b1e      	ldr	r3, [pc, #120]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d003      	beq.n	8001696 <HAL_RCC_GetSysClockFreq+0xa6>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d003      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0xac>
 8001694:	e005      	b.n	80016a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x110>)
 8001698:	617b      	str	r3, [r7, #20]
      break;
 800169a:	e005      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_RCC_GetSysClockFreq+0x114>)
 800169e:	617b      	str	r3, [r7, #20]
      break;
 80016a0:	e002      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	617b      	str	r3, [r7, #20]
      break;
 80016a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	3301      	adds	r3, #1
 80016b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016b6:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	fb03 f202 	mul.w	r2, r3, r2
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016ce:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	0e5b      	lsrs	r3, r3, #25
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	3301      	adds	r3, #1
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016de:	697a      	ldr	r2, [r7, #20]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016e8:	69bb      	ldr	r3, [r7, #24]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	@ 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40021000 	.word	0x40021000
 80016fc:	08002284 	.word	0x08002284
 8001700:	00f42400 	.word	0x00f42400
 8001704:	007a1200 	.word	0x007a1200

08001708 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800170c:	4b03      	ldr	r3, [pc, #12]	@ (800171c <HAL_RCC_GetHCLKFreq+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000000 	.word	0x20000000

08001720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001724:	f7ff fff0 	bl	8001708 <HAL_RCC_GetHCLKFreq>
 8001728:	4602      	mov	r2, r0
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	4904      	ldr	r1, [pc, #16]	@ (8001748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001736:	5ccb      	ldrb	r3, [r1, r3]
 8001738:	f003 031f 	and.w	r3, r3, #31
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	0800227c 	.word	0x0800227c

0800174c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	220f      	movs	r2, #15
 800175a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_RCC_GetClockConfig+0x5c>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <HAL_RCC_GetClockConfig+0x5c>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001774:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	08db      	lsrs	r3, r3, #3
 8001786:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <HAL_RCC_GetClockConfig+0x60>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0207 	and.w	r2, r3, #7
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	601a      	str	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40022000 	.word	0x40022000

080017b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80017bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80017c8:	f7ff f9d2 	bl	8000b70 <HAL_PWREx_GetVoltageRange>
 80017cc:	6178      	str	r0, [r7, #20]
 80017ce:	e014      	b.n	80017fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d4:	4a24      	ldr	r2, [pc, #144]	@ (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017da:	6593      	str	r3, [r2, #88]	@ 0x58
 80017dc:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80017e8:	f7ff f9c2 	bl	8000b70 <HAL_PWREx_GetVoltageRange>
 80017ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001868 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017f8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001800:	d10b      	bne.n	800181a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b80      	cmp	r3, #128	@ 0x80
 8001806:	d919      	bls.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2ba0      	cmp	r3, #160	@ 0xa0
 800180c:	d902      	bls.n	8001814 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800180e:	2302      	movs	r3, #2
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	e013      	b.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001814:	2301      	movs	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	e010      	b.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b80      	cmp	r3, #128	@ 0x80
 800181e:	d902      	bls.n	8001826 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001820:	2303      	movs	r3, #3
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	e00a      	b.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b80      	cmp	r3, #128	@ 0x80
 800182a:	d102      	bne.n	8001832 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800182c:	2302      	movs	r3, #2
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	e004      	b.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b70      	cmp	r3, #112	@ 0x70
 8001836:	d101      	bne.n	800183c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001838:	2301      	movs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800183c:	4b0b      	ldr	r3, [pc, #44]	@ (800186c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 0207 	bic.w	r2, r3, #7
 8001844:	4909      	ldr	r1, [pc, #36]	@ (800186c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	429a      	cmp	r2, r3
 8001858:	d001      	beq.n	800185e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40021000 	.word	0x40021000
 800186c:	40022000 	.word	0x40022000

08001870 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e049      	b.n	8001916 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f841 	bl	800191e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2202      	movs	r2, #2
 80018a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f000 f9e0 	bl	8001c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d001      	beq.n	800194c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e04f      	b.n	80019ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d01d      	beq.n	80019aa <HAL_TIM_Base_Start_IT+0x76>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001976:	d018      	beq.n	80019aa <HAL_TIM_Base_Start_IT+0x76>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1f      	ldr	r2, [pc, #124]	@ (80019fc <HAL_TIM_Base_Start_IT+0xc8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_TIM_Base_Start_IT+0x76>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a1e      	ldr	r2, [pc, #120]	@ (8001a00 <HAL_TIM_Base_Start_IT+0xcc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d00e      	beq.n	80019aa <HAL_TIM_Base_Start_IT+0x76>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1c      	ldr	r2, [pc, #112]	@ (8001a04 <HAL_TIM_Base_Start_IT+0xd0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d009      	beq.n	80019aa <HAL_TIM_Base_Start_IT+0x76>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1b      	ldr	r2, [pc, #108]	@ (8001a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d004      	beq.n	80019aa <HAL_TIM_Base_Start_IT+0x76>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	@ (8001a0c <HAL_TIM_Base_Start_IT+0xd8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d115      	bne.n	80019d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <HAL_TIM_Base_Start_IT+0xdc>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b06      	cmp	r3, #6
 80019ba:	d015      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0xb4>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c2:	d011      	beq.n	80019e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0201 	orr.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d4:	e008      	b.n	80019e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	e000      	b.n	80019ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40012c00 	.word	0x40012c00
 80019fc:	40000400 	.word	0x40000400
 8001a00:	40000800 	.word	0x40000800
 8001a04:	40000c00 	.word	0x40000c00
 8001a08:	40013400 	.word	0x40013400
 8001a0c:	40014000 	.word	0x40014000
 8001a10:	00010007 	.word	0x00010007

08001a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d020      	beq.n	8001a78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01b      	beq.n	8001a78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f06f 0202 	mvn.w	r2, #2
 8001a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8e9 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001a64:	e005      	b.n	8001a72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f8db 	bl	8001c22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f8ec 	bl	8001c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d020      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01b      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f06f 0204 	mvn.w	r2, #4
 8001a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2202      	movs	r2, #2
 8001a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f8c3 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001ab0:	e005      	b.n	8001abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8b5 	bl	8001c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 f8c6 	bl	8001c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d020      	beq.n	8001b10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01b      	beq.n	8001b10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0208 	mvn.w	r2, #8
 8001ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f89d 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001afc:	e005      	b.n	8001b0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f88f 	bl	8001c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f8a0 	bl	8001c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d020      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f003 0310 	and.w	r3, r3, #16
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01b      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0210 	mvn.w	r2, #16
 8001b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2208      	movs	r2, #8
 8001b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f877 	bl	8001c36 <HAL_TIM_IC_CaptureCallback>
 8001b48:	e005      	b.n	8001b56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f869 	bl	8001c22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f87a 	bl	8001c4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00c      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0201 	mvn.w	r2, #1
 8001b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe fbfc 	bl	8000378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d104      	bne.n	8001b94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00c      	beq.n	8001bae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f000 f913 	bl	8001dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00c      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 f90b 	bl	8001de8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00c      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f834 	bl	8001c5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0320 	and.w	r3, r3, #32
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f06f 0220 	mvn.w	r2, #32
 8001c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8d3 	bl	8001dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a46      	ldr	r2, [pc, #280]	@ (8001da0 <TIM_Base_SetConfig+0x12c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d013      	beq.n	8001cb4 <TIM_Base_SetConfig+0x40>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c92:	d00f      	beq.n	8001cb4 <TIM_Base_SetConfig+0x40>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a43      	ldr	r2, [pc, #268]	@ (8001da4 <TIM_Base_SetConfig+0x130>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00b      	beq.n	8001cb4 <TIM_Base_SetConfig+0x40>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a42      	ldr	r2, [pc, #264]	@ (8001da8 <TIM_Base_SetConfig+0x134>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d007      	beq.n	8001cb4 <TIM_Base_SetConfig+0x40>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a41      	ldr	r2, [pc, #260]	@ (8001dac <TIM_Base_SetConfig+0x138>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d003      	beq.n	8001cb4 <TIM_Base_SetConfig+0x40>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a40      	ldr	r2, [pc, #256]	@ (8001db0 <TIM_Base_SetConfig+0x13c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d108      	bne.n	8001cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a35      	ldr	r2, [pc, #212]	@ (8001da0 <TIM_Base_SetConfig+0x12c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d01f      	beq.n	8001d0e <TIM_Base_SetConfig+0x9a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cd4:	d01b      	beq.n	8001d0e <TIM_Base_SetConfig+0x9a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a32      	ldr	r2, [pc, #200]	@ (8001da4 <TIM_Base_SetConfig+0x130>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d017      	beq.n	8001d0e <TIM_Base_SetConfig+0x9a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a31      	ldr	r2, [pc, #196]	@ (8001da8 <TIM_Base_SetConfig+0x134>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d013      	beq.n	8001d0e <TIM_Base_SetConfig+0x9a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a30      	ldr	r2, [pc, #192]	@ (8001dac <TIM_Base_SetConfig+0x138>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00f      	beq.n	8001d0e <TIM_Base_SetConfig+0x9a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8001db0 <TIM_Base_SetConfig+0x13c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00b      	beq.n	8001d0e <TIM_Base_SetConfig+0x9a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8001db4 <TIM_Base_SetConfig+0x140>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <TIM_Base_SetConfig+0x9a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a2d      	ldr	r2, [pc, #180]	@ (8001db8 <TIM_Base_SetConfig+0x144>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d003      	beq.n	8001d0e <TIM_Base_SetConfig+0x9a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a2c      	ldr	r2, [pc, #176]	@ (8001dbc <TIM_Base_SetConfig+0x148>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d108      	bne.n	8001d20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <TIM_Base_SetConfig+0x12c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00f      	beq.n	8001d6c <TIM_Base_SetConfig+0xf8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a18      	ldr	r2, [pc, #96]	@ (8001db0 <TIM_Base_SetConfig+0x13c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00b      	beq.n	8001d6c <TIM_Base_SetConfig+0xf8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a17      	ldr	r2, [pc, #92]	@ (8001db4 <TIM_Base_SetConfig+0x140>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d007      	beq.n	8001d6c <TIM_Base_SetConfig+0xf8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a16      	ldr	r2, [pc, #88]	@ (8001db8 <TIM_Base_SetConfig+0x144>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d003      	beq.n	8001d6c <TIM_Base_SetConfig+0xf8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a15      	ldr	r2, [pc, #84]	@ (8001dbc <TIM_Base_SetConfig+0x148>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d103      	bne.n	8001d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f023 0201 	bic.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]
  }
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40012c00 	.word	0x40012c00
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40000c00 	.word	0x40000c00
 8001db0:	40013400 	.word	0x40013400
 8001db4:	40014000 	.word	0x40014000
 8001db8:	40014400 	.word	0x40014400
 8001dbc:	40014800 	.word	0x40014800

08001dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	@ 0x28
 8001e00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e06:	4b7e      	ldr	r3, [pc, #504]	@ (8002000 <xTaskIncrementTick+0x204>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 80ed 	bne.w	8001fea <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001e10:	4b7c      	ldr	r3, [pc, #496]	@ (8002004 <xTaskIncrementTick+0x208>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001e18:	4a7a      	ldr	r2, [pc, #488]	@ (8002004 <xTaskIncrementTick+0x208>)
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d121      	bne.n	8001e68 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001e24:	4b78      	ldr	r3, [pc, #480]	@ (8002008 <xTaskIncrementTick+0x20c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
 8001e3e:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	e7fd      	b.n	8001e42 <xTaskIncrementTick+0x46>
 8001e46:	4b70      	ldr	r3, [pc, #448]	@ (8002008 <xTaskIncrementTick+0x20c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	4b6f      	ldr	r3, [pc, #444]	@ (800200c <xTaskIncrementTick+0x210>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a6d      	ldr	r2, [pc, #436]	@ (8002008 <xTaskIncrementTick+0x20c>)
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4a6d      	ldr	r2, [pc, #436]	@ (800200c <xTaskIncrementTick+0x210>)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002010 <xTaskIncrementTick+0x214>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	4a6b      	ldr	r2, [pc, #428]	@ (8002010 <xTaskIncrementTick+0x214>)
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	f000 f93e 	bl	80020e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001e68:	4b6a      	ldr	r3, [pc, #424]	@ (8002014 <xTaskIncrementTick+0x218>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6a3a      	ldr	r2, [r7, #32]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	f0c0 80a6 	bcc.w	8001fc0 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e74:	4b64      	ldr	r3, [pc, #400]	@ (8002008 <xTaskIncrementTick+0x20c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d104      	bne.n	8001e88 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e7e:	4b65      	ldr	r3, [pc, #404]	@ (8002014 <xTaskIncrementTick+0x218>)
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	601a      	str	r2, [r3, #0]
                    break;
 8001e86:	e09b      	b.n	8001fc0 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e88:	4b5f      	ldr	r3, [pc, #380]	@ (8002008 <xTaskIncrementTick+0x20c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001e98:	6a3a      	ldr	r2, [r7, #32]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d203      	bcs.n	8001ea8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001ea0:	4a5c      	ldr	r2, [pc, #368]	@ (8002014 <xTaskIncrementTick+0x218>)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001ea6:	e08b      	b.n	8001fc0 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	68d2      	ldr	r2, [r2, #12]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	6892      	ldr	r2, [r2, #8]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d103      	bne.n	8001ed6 <xTaskIncrementTick+0xda>
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	615a      	str	r2, [r3, #20]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	1e5a      	subs	r2, r3, #1
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d01e      	beq.n	8001f2c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	6a12      	ldr	r2, [r2, #32]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	69d2      	ldr	r2, [r2, #28]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	3318      	adds	r3, #24
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d103      	bne.n	8001f1c <xTaskIncrementTick+0x120>
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	1e5a      	subs	r2, r3, #1
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	2201      	movs	r2, #1
 8001f32:	409a      	lsls	r2, r3
 8001f34:	4b38      	ldr	r3, [pc, #224]	@ (8002018 <xTaskIncrementTick+0x21c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	4a37      	ldr	r2, [pc, #220]	@ (8002018 <xTaskIncrementTick+0x21c>)
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f42:	4936      	ldr	r1, [pc, #216]	@ (800201c <xTaskIncrementTick+0x220>)
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3304      	adds	r3, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	3204      	adds	r2, #4
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1d1a      	adds	r2, r3, #4
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4a26      	ldr	r2, [pc, #152]	@ (800201c <xTaskIncrementTick+0x220>)
 8001f82:	441a      	add	r2, r3
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	615a      	str	r2, [r3, #20]
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f8c:	4923      	ldr	r1, [pc, #140]	@ (800201c <xTaskIncrementTick+0x220>)
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	1c59      	adds	r1, r3, #1
 8001f9c:	481f      	ldr	r0, [pc, #124]	@ (800201c <xTaskIncrementTick+0x220>)
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4403      	add	r3, r0
 8001fa8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fae:	4b1c      	ldr	r3, [pc, #112]	@ (8002020 <xTaskIncrementTick+0x224>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	f67f af5d 	bls.w	8001e74 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fbe:	e759      	b.n	8001e74 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001fc0:	4b17      	ldr	r3, [pc, #92]	@ (8002020 <xTaskIncrementTick+0x224>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc6:	4915      	ldr	r1, [pc, #84]	@ (800201c <xTaskIncrementTick+0x220>)
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d901      	bls.n	8001fdc <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8001fdc:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <xTaskIncrementTick+0x228>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe8:	e004      	b.n	8001ff4 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001fea:	4b0f      	ldr	r3, [pc, #60]	@ (8002028 <xTaskIncrementTick+0x22c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8002028 <xTaskIncrementTick+0x22c>)
 8001ff2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3728      	adds	r7, #40	@ 0x28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000100 	.word	0x20000100
 8002004:	200000e8 	.word	0x200000e8
 8002008:	200000e0 	.word	0x200000e0
 800200c:	200000e4 	.word	0x200000e4
 8002010:	200000f8 	.word	0x200000f8
 8002014:	200000fc 	.word	0x200000fc
 8002018:	200000ec 	.word	0x200000ec
 800201c:	2000007c 	.word	0x2000007c
 8002020:	20000078 	.word	0x20000078
 8002024:	200000f4 	.word	0x200000f4
 8002028:	200000f0 	.word	0x200000f0

0800202c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002032:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <vTaskSwitchContext+0xa4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800203a:	4b26      	ldr	r3, [pc, #152]	@ (80020d4 <vTaskSwitchContext+0xa8>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002040:	e040      	b.n	80020c4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002042:	4b24      	ldr	r3, [pc, #144]	@ (80020d4 <vTaskSwitchContext+0xa8>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002048:	4b23      	ldr	r3, [pc, #140]	@ (80020d8 <vTaskSwitchContext+0xac>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002056:	7afb      	ldrb	r3, [r7, #11]
 8002058:	f1c3 031f 	rsb	r3, r3, #31
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	491f      	ldr	r1, [pc, #124]	@ (80020dc <vTaskSwitchContext+0xb0>)
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10b      	bne.n	800208a <vTaskSwitchContext+0x5e>
        __asm volatile
 8002072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002076:	f383 8811 	msr	BASEPRI, r3
 800207a:	f3bf 8f6f 	isb	sy
 800207e:	f3bf 8f4f 	dsb	sy
 8002082:	607b      	str	r3, [r7, #4]
    }
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	e7fd      	b.n	8002086 <vTaskSwitchContext+0x5a>
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4a11      	ldr	r2, [pc, #68]	@ (80020dc <vTaskSwitchContext+0xb0>)
 8002096:	4413      	add	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	3308      	adds	r3, #8
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d104      	bne.n	80020ba <vTaskSwitchContext+0x8e>
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4a07      	ldr	r2, [pc, #28]	@ (80020e0 <vTaskSwitchContext+0xb4>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	371c      	adds	r7, #28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	20000100 	.word	0x20000100
 80020d4:	200000f4 	.word	0x200000f4
 80020d8:	200000ec 	.word	0x200000ec
 80020dc:	2000007c 	.word	0x2000007c
 80020e0:	20000078 	.word	0x20000078

080020e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <prvResetNextTaskUnblockTime+0x30>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d104      	bne.n	80020fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <prvResetNextTaskUnblockTime+0x34>)
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80020fa:	e005      	b.n	8002108 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <prvResetNextTaskUnblockTime+0x30>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a04      	ldr	r2, [pc, #16]	@ (8002118 <prvResetNextTaskUnblockTime+0x34>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200000e0 	.word	0x200000e0
 8002118:	200000fc 	.word	0x200000fc
 800211c:	00000000 	.word	0x00000000

08002120 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002120:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <pxCurrentTCBConst2>)
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	6808      	ldr	r0, [r1, #0]
 8002126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800212a:	f380 8809 	msr	PSP, r0
 800212e:	f3bf 8f6f 	isb	sy
 8002132:	f04f 0000 	mov.w	r0, #0
 8002136:	f380 8811 	msr	BASEPRI, r0
 800213a:	4770      	bx	lr
 800213c:	f3af 8000 	nop.w

08002140 <pxCurrentTCBConst2>:
 8002140:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
	...

08002150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002150:	f3ef 8009 	mrs	r0, PSP
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <pxCurrentTCBConst>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	f01e 0f10 	tst.w	lr, #16
 8002160:	bf08      	it	eq
 8002162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800216a:	6010      	str	r0, [r2, #0]
 800216c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002174:	f380 8811 	msr	BASEPRI, r0
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f7ff ff54 	bl	800202c <vTaskSwitchContext>
 8002184:	f04f 0000 	mov.w	r0, #0
 8002188:	f380 8811 	msr	BASEPRI, r0
 800218c:	bc09      	pop	{r0, r3}
 800218e:	6819      	ldr	r1, [r3, #0]
 8002190:	6808      	ldr	r0, [r1, #0]
 8002192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002196:	f01e 0f10 	tst.w	lr, #16
 800219a:	bf08      	it	eq
 800219c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80021a0:	f380 8809 	msr	PSP, r0
 80021a4:	f3bf 8f6f 	isb	sy
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	f3af 8000 	nop.w

080021b0 <pxCurrentTCBConst>:
 80021b0:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop

080021b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
        __asm volatile
 80021be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c2:	f383 8811 	msr	BASEPRI, r3
 80021c6:	f3bf 8f6f 	isb	sy
 80021ca:	f3bf 8f4f 	dsb	sy
 80021ce:	607b      	str	r3, [r7, #4]
    }
 80021d0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80021d2:	f7ff fe13 	bl	8001dfc <xTaskIncrementTick>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80021dc:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <SysTick_Handler+0x40>)
 80021de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	2300      	movs	r3, #0
 80021e6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80021ee:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	e000ed04 	.word	0xe000ed04

080021fc <memset>:
 80021fc:	4402      	add	r2, r0
 80021fe:	4603      	mov	r3, r0
 8002200:	4293      	cmp	r3, r2
 8002202:	d100      	bne.n	8002206 <memset+0xa>
 8002204:	4770      	bx	lr
 8002206:	f803 1b01 	strb.w	r1, [r3], #1
 800220a:	e7f9      	b.n	8002200 <memset+0x4>

0800220c <__libc_init_array>:
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	4d0d      	ldr	r5, [pc, #52]	@ (8002244 <__libc_init_array+0x38>)
 8002210:	4c0d      	ldr	r4, [pc, #52]	@ (8002248 <__libc_init_array+0x3c>)
 8002212:	1b64      	subs	r4, r4, r5
 8002214:	10a4      	asrs	r4, r4, #2
 8002216:	2600      	movs	r6, #0
 8002218:	42a6      	cmp	r6, r4
 800221a:	d109      	bne.n	8002230 <__libc_init_array+0x24>
 800221c:	4d0b      	ldr	r5, [pc, #44]	@ (800224c <__libc_init_array+0x40>)
 800221e:	4c0c      	ldr	r4, [pc, #48]	@ (8002250 <__libc_init_array+0x44>)
 8002220:	f000 f818 	bl	8002254 <_init>
 8002224:	1b64      	subs	r4, r4, r5
 8002226:	10a4      	asrs	r4, r4, #2
 8002228:	2600      	movs	r6, #0
 800222a:	42a6      	cmp	r6, r4
 800222c:	d105      	bne.n	800223a <__libc_init_array+0x2e>
 800222e:	bd70      	pop	{r4, r5, r6, pc}
 8002230:	f855 3b04 	ldr.w	r3, [r5], #4
 8002234:	4798      	blx	r3
 8002236:	3601      	adds	r6, #1
 8002238:	e7ee      	b.n	8002218 <__libc_init_array+0xc>
 800223a:	f855 3b04 	ldr.w	r3, [r5], #4
 800223e:	4798      	blx	r3
 8002240:	3601      	adds	r6, #1
 8002242:	e7f2      	b.n	800222a <__libc_init_array+0x1e>
 8002244:	080022b4 	.word	0x080022b4
 8002248:	080022b4 	.word	0x080022b4
 800224c:	080022b4 	.word	0x080022b4
 8002250:	080022b8 	.word	0x080022b8

08002254 <_init>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	bf00      	nop
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr

08002260 <_fini>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr
